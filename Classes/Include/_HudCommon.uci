/*
	COPYRIGHT NOTICE
	Below code is copyright Azarael - used with permission:
	https://steamcommunity.com/app/13230/discussions/0/611702631218438023/#c611702631227999537
*/

//Common rendering code used in all widescreen HUDs
//Courtesy of HUD Scaling Fix by Azarael, modified a bit for portability
simulated final function DrawSpriteTileWidget(Canvas C, SpriteWidget W)
{
	local float TotalScaleY;
	local float ScreenX, ScreenY;
	local float ScreenDX, ScreenDY;
	local float ScreenXOffset, ScreenYOffset;
	local float TextureX1, TextureY1;
	local float TextureDX, TextureDY;
	local float WidgetClipX, WidgetClipY;
	local float XShift, YShift;

	if (!class'Misc_Player'.default.bEnableWidescreenFix) {
		DrawSpriteWidget(C, W);
		return;
	}

	C.Style = W.RenderStyle;
	C.DrawColor = W.Tints[TeamIndex];

	XShift = XShifts[W.DrawPivot];
	YShift = YShifts[W.DrawPivot];

	TotalScaleY = W.TextureScale * ResScaleY * HUDScale;

	TextureX1 = W.TextureCoords.X1;
	TextureY1 = W.TextureCoords.Y1;

	TextureDX = W.TextureCoords.X2 - W.TextureCoords.X1;
	TextureDY = W.TextureCoords.Y2 - W.TextureCoords.Y1;

	WidgetClipX = C.ClipX * W.PosX;
	WidgetClipY = C.ClipY * W.PosY;

	ScreenDX = Abs(TextureDX) * TotalScaleY;
	ScreenDY = Abs(TextureDY) * TotalScaleY;

	ScreenXOffset = W.OffsetX - Abs(TextureDX) * XShift;
	ScreenYOffset = W.OffsetY - Abs(TextureDY) * YShift;

	ScreenX = WidgetClipX + ScreenXOffset * TotalScaleY;
	ScreenY = WidgetClipY + ScreenYOffset * TotalScaleY;

	switch (W.ScaleMode)
	{
		case SM_None:
			break;
	
		case SM_Right:
			ScreenDX = ScreenDX * W.Scale;
			TextureDX = TextureDX * W.Scale;
			break;

		case SM_Left:
			ScreenX = WidgetClipX + (ScreenXOffset + (Abs(TextureDX) * (1 - W.Scale))) * TotalScaleY;
			ScreenDX = ScreenDX * W.Scale;
			TextureX1 = TextureX1 + (TextureDX * (1 - W.Scale));
			TextureDX = TextureDX * W.Scale;
			break;

		case SM_Down:
			ScreenDY = ScreenDY * W.Scale;
			TextureDY = TextureDY * W.Scale;
			break;
	
		case SM_Up:
			ScreenY = WidgetClipY + (ScreenYOffset + (Abs(TextureDY) * (1 - W.Scale))) * TotalScaleY;
			ScreenDY = ScreenDY * W.Scale;
			TextureY1 = TextureY1 + (TextureDY * (1 - W.Scale));
			TextureDY = TextureDY * W.Scale;
			break;
	}

	C.SetPos(ScreenX, ScreenY);
	C.DrawTile(
		W.WidgetTexture,
		ScreenDX,
		ScreenDY,
		TextureX1,
		TextureY1,
		TextureDX,
		TextureDY
	);
}

simulated final function DrawNumericTileWidget(Canvas C, NumericWidget W, DigitSet D)
{
	local String s;
	local array<String> t;
	local int padding, length, i;
	local byte coordindex;
	
	local float TotalScaleY;
	local float ScreenX, ScreenY;
	local float ScreenXOffset, ScreenYOffset;
	local float TextureDX, TextureDY;
	local float WidgetClipX, WidgetClipY;
	local float XShift, YShift;

	if (!class'Misc_Player'.default.bEnableWidescreenFix) {
		DrawNumericWidget(C, W, D);
		return;
	}

	C.Style = W.RenderStyle;
	C.DrawColor = W.Tints[TeamIndex];

	s = String(W.Value);
	length = Len(s);
	padding = Max(0, W.MinDigitCount - length);

	if (W.bPadWithZeroes != 0)
		length += padding;
	for (i = 0; i < length; i++) {
		if (W.bPadWithZeroes == 1 && i < padding)
			t[i] = "0";
		else {
			t[i] = "";
			EatStr(t[i], s, 1);
		}
	}

	XShift = XShifts[W.DrawPivot];
	YShift = YShifts[W.DrawPivot];

	TotalScaleY = W.TextureScale * ResScaleY * HUDScale;

	TextureDX = D.TextureCoords[0].X2 - D.TextureCoords[0].X1;
	TextureDY = D.TextureCoords[0].Y2 - D.TextureCoords[0].Y1;

	WidgetClipX = C.ClipX * W.PosX;
	WidgetClipY = C.ClipY * W.PosY;

	ScreenXOffset = W.OffsetX - TextureDX * (((length + padding) * XShift) - (padding * (1 - W.bPadWithZeroes)));
	ScreenYOffset = W.OffsetY - TextureDY * YShift;

	ScreenX = WidgetClipX + ScreenXOffset * TotalScaleY;
	ScreenY = WidgetClipY + ScreenYOffset * TotalScaleY;

	C.SetPos(ScreenX, ScreenY);

	for (i = 0; i < length; i++) {
		if (t[i] == "-")
			coordindex = 10;
		else coordindex = byte(t[i]);

		C.DrawTile(
			D.DigitTexture,
			(D.TextureCoords[coordindex].X2 - D.TextureCoords[coordindex].X1) * TotalScaleY,
			(D.TextureCoords[coordindex].Y2 - D.TextureCoords[coordindex].Y1) * TotalScaleY,
			D.TextureCoords[coordindex].X1,
			D.TextureCoords[coordindex].Y1,
			D.TextureCoords[coordindex].X2 - D.TextureCoords[coordindex].X1,
			D.TextureCoords[coordindex].Y2 - D.TextureCoords[coordindex].Y1
		);
	}
}
