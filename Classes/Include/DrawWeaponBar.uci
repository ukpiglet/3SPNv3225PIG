/*
	COPYRIGHT NOTICE
	Below code is copyright Epic Games - all rights reserved
	(Note: This package is not endorsed by Epic Games)

	It is included for technical purposes only (e.g. to enable widescreen functionality)
	There are a two specific function replacements made:
		DrawSpriteWidget -> DrawSpriteTileWidget
		DrawNumericWidget -> DrawNumericTileWidget
	Additionally, Super function calls are replaced with the appropriate "Wide" call:
		Super.AbcXYZ -> WideAbcXYZ
	Finally, there may be smaller tweaks made based on Azarael's original HUDFix Mutator
	These changes are marked with ~fox on a per-line basis detailing what changed
*/

//#include Classes\Include\_Internal\DrawWeaponBar.uci
simulated function WideDrawWeaponBar(Canvas C)
{
	local int i, Count, Pos;
	local float IconOffset;
	//local float HudScaleOffset, HudMinScale; //Removed, no longer needed ~fox

	local Weapon Weapons[WEAPON_BAR_SIZE];
	local byte ExtraWeapon[WEAPON_BAR_SIZE];
	local Inventory Inv;
	local Weapon W, PendingWeapon;

	//HudMinScale=0.5; // //Removed, no longer needed ~fox
	// CurHudScale = HudScale;
	//no weaponbar for vehicles
	if (Vehicle(PawnOwner) != None)
	return;

	if (PawnOwner.PendingWeapon != None)
		PendingWeapon = PawnOwner.PendingWeapon;
	else
		PendingWeapon = PawnOwner.Weapon;

	// fill:
	for( Inv=PawnOwner.Inventory; Inv!=None; Inv=Inv.Inventory )
	{
		W = Weapon( Inv );
		Count++;
		if ( Count > 100 )
			break;

		if( (W == None) || (W.IconMaterial == None) )
			continue;

		if ( W.InventoryGroup == 0 )
			Pos = 8;
		else if ( W.InventoryGroup < 10 )
			Pos = W.InventoryGroup-1;
		else
			continue;

		if ( Weapons[Pos] != None )
			ExtraWeapon[Pos] = 1;
		else
			Weapons[Pos] = W;
	}

	if ( PendingWeapon != None )
	{
		if ( PendingWeapon.InventoryGroup == 0 )
			Weapons[8] = PendingWeapon;
		else if ( PendingWeapon.InventoryGroup < 10 )
			Weapons[PendingWeapon.InventoryGroup-1] = PendingWeapon;
	}

	// Draw:
	for( i=0; i<WEAPON_BAR_SIZE; i++ )
	{
		W = Weapons[i];

		// Keep weaponbar organized when scaled
		//HudScaleOffset= 1-(HudScale-HudMinScale)/HudMinScale; //Removed, no longer needed ~fox
		//BarBorder[i].PosX =  default.BarBorder[i].PosX+( BarBorderScaledPosition[i] - default.BarBorder[i].PosX) *HudScaleOffset; //Replaced w/ below line ~fox
		BarBorder[i].PosX = 0.5 - ((0.5 - default.BarBorder[i].PosX) * HudScale * (ResScaleY/ResScaleX)); //Courtesy of HUD Scaling Fix by Azarael ~fox

		BarWeaponIcon[i].PosX = BarBorder[i].PosX;

		IconOffset = (default.BarBorder[i].TextureCoords.X2 - default.BarBorder[i].TextureCoords.X1) *0.5 ;
		BarWeaponIcon[i].OffsetX =	IconOffset;

		BarBorder[i].Tints[0] = HudColorRed;
		BarBorder[i].Tints[1] = HudColorBlue;
		BarBorder[i].OffsetY = 0;
		BarWeaponIcon[i].OffsetY = default.BarWeaponIcon[i].OffsetY;

		if( W == none )
		{
			BarWeaponStates[i].HasWeapon = false;
			if ( bShowMissingWeaponInfo )
			{
				if ( BarWeaponIcon[i].Tints[TeamIndex] != HudColorBlack )
				{
					BarWeaponIcon[i].WidgetTexture = default.BarWeaponIcon[i].WidgetTexture;
					BarWeaponIcon[i].TextureCoords = default.BarWeaponIcon[i].TextureCoords;
					BarWeaponIcon[i].TextureScale = default.BarWeaponIcon[i].TextureScale;
					BarWeaponIcon[i].Tints[TeamIndex] = HudColorBlack;
					BarWeaponIconAnim[i] = 0;
				}
				DrawSpriteTileWidget( C, BarBorder[i] );
				DrawSpriteTileWidget( C, BarWeaponIcon[i] ); // FIXME- have combined version
			}
	   }
		else
		{
			if( !BarWeaponStates[i].HasWeapon )
			{
				// just picked this weapon up!
				BarWeaponStates[i].PickupTimer = Level.TimeSeconds;
				BarWeaponStates[i].HasWeapon = true;
			}

			BarBorderAmmoIndicator[i].PosX = BarBorder[i].PosX;
			BarBorderAmmoIndicator[i].OffsetY = 0;
			BarWeaponIcon[i].WidgetTexture = W.IconMaterial;
			BarWeaponIcon[i].TextureCoords = W.IconCoords;

			BarBorderAmmoIndicator[i].Scale = W.AmmoStatus();
			BarWeaponIcon[i].Tints[TeamIndex] = HudColorNormal;

			if( BarWeaponIconAnim[i] == 0 )
			{
				if ( BarWeaponStates[i].PickupTimer > Level.TimeSeconds - 0.6 )
				{
				   if ( BarWeaponStates[i].PickupTimer > Level.TimeSeconds - 0.3 )
				   {
					   	BarWeaponIcon[i].TextureScale = default.BarWeaponIcon[i].TextureScale * (1 + 1.3 * (Level.TimeSeconds - BarWeaponStates[i].PickupTimer));
						BarWeaponIcon[i].OffsetX =	IconOffset - IconOffset * ( Level.TimeSeconds - BarWeaponStates[i].PickupTimer );
				   }
				   else
				   {
						BarWeaponIcon[i].TextureScale = default.BarWeaponIcon[i].TextureScale * (1 + 1.3 * (BarWeaponStates[i].PickupTimer + 0.6 - Level.TimeSeconds));
						BarWeaponIcon[i].OffsetX = IconOffset - IconOffset * (BarWeaponStates[i].PickupTimer + 0.6 - Level.TimeSeconds);
				   }
				}
				else
				{
					BarWeaponIconAnim[i] = 1;
					BarWeaponIcon[i].TextureScale = default.BarWeaponIcon[i].TextureScale;
				}
			}

			if (W == PendingWeapon)
			{
				// Change color to highlight and possibly changeTexture or animate it
				BarBorder[i].Tints[TeamIndex] = HudColorHighLight;
				BarBorder[i].OffsetY = -10;
				BarBorderAmmoIndicator[i].OffsetY = -10;
				BarWeaponIcon[i].OffsetY += -10;
			}
			if ( ExtraWeapon[i] == 1 )
			{
				if ( W == PendingWeapon )
				{
					BarBorder[i].Tints[0] = HudColorRed;
					BarBorder[i].Tints[1] = HudColorBlue;
					BarBorder[i].OffsetY = 0;
					BarBorder[i].TextureCoords.Y1 = 80;
					DrawSpriteTileWidget( C, BarBorder[i] );
					BarBorder[i].TextureCoords.Y1 = 39;
					BarBorder[i].OffsetY = -10;
					BarBorder[i].Tints[TeamIndex] = HudColorHighLight;
				}
				else
				{
					BarBorder[i].OffsetY = -52;
					BarBorder[i].TextureCoords.Y2 = 48;
					DrawSpriteTileWidget( C, BarBorder[i] );
					BarBorder[i].TextureCoords.Y2 = 93;
					BarBorder[i].OffsetY = 0;
				}
			}
			DrawSpriteTileWidget( C, BarBorder[i] );
			DrawSpriteTileWidget( C, BarBorderAmmoIndicator[i] );
			DrawSpriteTileWidget( C, BarWeaponIcon[i] );
	   }
	}
}
